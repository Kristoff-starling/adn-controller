/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/UWNetworksLab/app-defined-networks/controller/gen/apis/adncontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdnconfigLister helps list Adnconfigs.
// All objects returned here must be treated as read-only.
type AdnconfigLister interface {
	// List lists all Adnconfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Adnconfig, err error)
	// Adnconfigs returns an object that can list and get Adnconfigs.
	Adnconfigs(namespace string) AdnconfigNamespaceLister
	AdnconfigListerExpansion
}

// adnconfigLister implements the AdnconfigLister interface.
type adnconfigLister struct {
	indexer cache.Indexer
}

// NewAdnconfigLister returns a new AdnconfigLister.
func NewAdnconfigLister(indexer cache.Indexer) AdnconfigLister {
	return &adnconfigLister{indexer: indexer}
}

// List lists all Adnconfigs in the indexer.
func (s *adnconfigLister) List(selector labels.Selector) (ret []*v1alpha1.Adnconfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Adnconfig))
	})
	return ret, err
}

// Adnconfigs returns an object that can list and get Adnconfigs.
func (s *adnconfigLister) Adnconfigs(namespace string) AdnconfigNamespaceLister {
	return adnconfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdnconfigNamespaceLister helps list and get Adnconfigs.
// All objects returned here must be treated as read-only.
type AdnconfigNamespaceLister interface {
	// List lists all Adnconfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Adnconfig, err error)
	// Get retrieves the Adnconfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Adnconfig, error)
	AdnconfigNamespaceListerExpansion
}

// adnconfigNamespaceLister implements the AdnconfigNamespaceLister
// interface.
type adnconfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Adnconfigs in the indexer for a given namespace.
func (s adnconfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Adnconfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Adnconfig))
	})
	return ret, err
}

// Get retrieves the Adnconfig from the indexer for a given namespace and name.
func (s adnconfigNamespaceLister) Get(name string) (*v1alpha1.Adnconfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("adnconfig"), name)
	}
	return obj.(*v1alpha1.Adnconfig), nil
}
